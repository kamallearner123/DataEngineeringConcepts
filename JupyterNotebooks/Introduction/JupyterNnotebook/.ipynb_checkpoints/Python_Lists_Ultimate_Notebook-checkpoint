{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# Python Lists: Ultimate Guide with Examples, Challenges, and Assignments\n",
        "\n",
        "## Introduction\n",
        "This notebook is a comprehensive resource for mastering Python lists, a mutable, ordered, and dynamic data structure central to Python programming. Lists support heterogeneous elements, dynamic resizing, and a rich set of methods, making them ideal for data processing, algorithms, and integration with libraries like NumPy and pandas. This guide covers list fundamentals, operations, methods, comprehensions, advanced techniques, performance considerations, common pitfalls, and real-world applications. It includes extensive examples, 10 interactive challenges, and 10 assignments to solidify your skills.\n",
        "\n",
        "**Why Lists?** Lists are versatile, used in tasks from simple data storage to complex algorithms like sorting, searching, and graph traversal. Mastering lists enhances your ability to write efficient, readable code.\n",
        "\n",
        "**Generated on May 22, 2025, at 19:05 IST by Grok 3**"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## 1. List Fundamentals\n",
        "\n",
        "### 1.1 Creating Lists\n",
        "Lists are defined with square brackets `[]` or the `list()` constructor. They can be empty, homogeneous, or heterogeneous, and they maintain insertion order."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Empty list\n",
        "empty_list = []\n",
        "\n",
        "# Homogeneous list\n",
        "numbers = [1, 2, 3, 4, 5]\n",
        "\n",
        "# Heterogeneous list\n",
        "mixed = [1, \"hello\", 3.14, True, None]\n",
        "\n",
        "# Using list() constructor\n",
        "from_string = list(\"Python\")\n",
        "from_tuple = list((10, 20, 30))\n",
        "from_range = list(range(1, 7))\n",
        "print(from_string)    # Output: ['P', 'y', 't', 'h', 'o', 'n']\n",
        "print(from_tuple)     # Output: [10, 20, 30]\n",
        "print(from_range)     # Output: [1, 2, 3, 4, 5, 6]\n",
        "\n",
        "# Repeated elements\n",
        "zeros = [0] * 5\n",
        "print(zeros)          # Output: [0, 0, 0, 0, 0]"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "**Memory Insight**: Lists store references to objects, not copies. This allows flexibility but requires caution with mutable objects (see Section 5.2)."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### 1.2 Accessing and Length\n",
        "Lists are zero-indexed. Negative indices access elements from the end. Use `len()` for size."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "cities = [\"Tokyo\", \"Paris\", \"New York\", \"London\", \"Sydney\", \"Dubai\", \"Singapore\"]\n",
        "print(cities[0])       # Output: Tokyo\n",
        "print(cities[-1])      # Output: Singapore\n",
        "print(len(cities))     # Output: 7\n",
        "\n",
        "# Edge case: IndexError\n",
        "try:\n",
        "    print(cities[10])\n",
        "except IndexError as e:\n",
        "    print(f\"Error: {e}\")  # Output: Error: list index out of range"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### Challenge 1: List Creation and Access\n",
        "Create a list of 8 favorite books. Print the first, fourth, and second-to-last book, and check if the list has at least 5 elements."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Your code here\n",
        "books = []  # Replace with 8 favorite books\n",
        "print(books[0], books[3], books[-2], len(books) >= 5)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## 2. List Operations\n",
        "\n",
        ### 2.1 Slicing\n",
        "Slicing uses `[start:end:step]` to extract sublists. `start` is inclusive, `end` is exclusive, and `step` controls the stride."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "numbers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n",
        "print(numbers[2:7])     # Output: [2, 3, 4, 5, 6]\n",
        "print(numbers[::3])     # Output: [0, 3, 6, 9]\n",
        "print(numbers[::-1])    # Output: [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0]\n",
        "print(numbers[1:9:2])   # Output: [1, 3, 5, 7]\n",
        "print(numbers[8:2:-1])  # Output: [8, 7, 6, 5, 4, 3]"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "**Note**: Slicing returns a shallow copy, so modifications to the slice donâ€™t affect the original list."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### 2.2 Modifying Lists\n",
        "Lists are mutable, supporting changes via indexing, slicing, or operators (`+`, `*`)."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "colors = [\"red\", \"blue\", \"green\", \"yellow\"]\n",
        "colors[1] = \"purple\"                     # Single element change\n",
        "print(colors)                           # Output: ['red', 'purple', 'green', 'yellow']\n",
        "\n",
        "colors[0:2] = [\"black\", \"white\"]        # Replace slice\n",
        "print(colors)                           # Output: ['black', 'white', 'green', 'yellow']\n",
        "\n",
        "# Concatenation and repetition\n",
        "list1 = [1, 2, 3]\n",
        "list2 = [4, 5, 6]\n",
        "combined = list1 + list2\n",
        "print(combined)                         # Output: [1, 2, 3, 4, 5, 6]\n",
        "repeated = list1 * 3\n",
        "print(repeated)                         # Output: [1, 2, 3, 1, 2, 3, 1, 2, 3]"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "**Pitfall**: Slicing assignments require iterables. Assigning a non-iterable raises a `TypeError`."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "try:\n",
        "    colors[0:2] = 100  # Incorrect\n",
        "except TypeError as e:\n",
        "    print(f\"Error: {e}\")  # Output: Error: can only assign an iterable\n",
        "\n",
        "colors[0:2] = [100]  # Correct\n",
        "print(colors)         # Output: [100, 'green', 'yellow']"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### Challenge 2: Complex Slicing\n",
        "Given `data = [0, 10, 20, 30, 40, 50, 60, 70, 80, 90]`, replace the last three elements with `[100, 200]`, then extract every second element in reverse order starting from the end."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "data = [0, 10, 20, 30, 40, 50, 60, 70, 80, 90]\n",
        "# Your code here\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## 3. List Methods\n",
        "Python lists provide a robust set of methods for manipulation. Below is a detailed overview."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "items = [1, 2, 3]\n",
        "items.append(4)          # Add single element\n",
        "print(items)             # Output: [1, 2, 3, 4]\n",
        "\n",
        "items.extend([5, 6])     # Add multiple elements\n",
        "print(items)             # Output: [1, 2, 3, 4, 5, 6]\n",
        "\n",
        "items.insert(2, \"new\")   # Insert at index 2\n",
        "print(items)             # Output: [1, 2, 'new', 3, 4, 5, 6]\n",
        "\n",
        "items.remove(\"new\")      # Remove first occurrence\n",
        "print(items)             # Output: [1, 2, 3, 4, 5, 6]\n",
        "\n",
        "popped = items.pop(2)    # Remove and return element at index 2\n",
        "print(popped, items)     # Output: 3 [1, 2, 4, 5, 6]\n",
        "\n",
        "items.sort()             # Sort in-place\n",
        "print(items)             # Output: [1, 2, 4, 5, 6]\n",
        "\n",
        "items.reverse()          # Reverse in-place\n",
        "print(items)             # Output: [6, 5, 4, 2, 1]\n",
        "\n",
        "print(items.index(4))    # Output: 2\n",
        "print(items.count(2))    # Output: 1\n",
        "\n",
        "items.clear()            # Remove all elements\n",
        "print(items)             # Output: []"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "**Advanced Sorting**: Use `sort(key=...)` or `sorted(..., key=...)` for custom sorting. The `key` function transforms elements for comparison."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "words = [\"apple\", \"banana\", \"fig\", \"kiwi\"]\n",
        "words.sort(key=len, reverse=True)  # Sort by length, descending\n",
        "print(words)                       # Output: ['banana', 'apple', 'kiwi', 'fig']\n",
        "\n",
        "numbers = [3, 1, 4, 1, 5]\n",
        "sorted_numbers = sorted(numbers, key=lambda x: -x)  # Descending\n",
        "print(sorted_numbers, numbers)     # Output: [5, 4, 3, 1, 1] [3, 1, 4, 1, 5]"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "**Pitfall**: Sorting mixed types raises a `TypeError` unless a `key` function ensures comparability."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "mixed = [1, \"two\", 3]\n",
        "try:\n",
        "    mixed.sort()\n",
        "except TypeError as e:\n",
        "    print(f\"Error: {e}\")  # Output: Error: '<' not supported between instances of 'str' and 'int'"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### Challenge 3: Advanced List Methods\n",
        "Given `items = [10, 20, 10, 30, 20, 40]`, append 50, insert 15 at index 2, remove all 10s, sort in ascending order, and print the index of 20."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "items = [10, 20, 10, 30, 20, 40]\n",
        "# Your code here\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## 4. List Comprehensions\n",
        "List comprehensions provide a concise, efficient way to create or transform lists, often outperforming loops."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Basic comprehension\n",
        "cubes = [x**3 for x in range(5)]\n",
        "print(cubes)  # Output: [0, 1, 8, 27, 64]\n",
        "\n",
        "# With condition\n",
        "evens = [x for x in range(10) if x % 2 == 0]\n",
        "print(evens)  # Output: [0, 2, 4, 6, 8]\n",
        "\n",
        "# Nested comprehension (4x4 matrix)\n",
        "matrix = [[i * 4 + j + 1 for j in range(4)] for i in range(4)]\n",
        "print(matrix)  # Output: [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]\n",
        "\n",
        "# Conditional logic\n",
        "numbers = [-4, -2, 0, 2, 4]\n",
        "transformed = [x**2 if x > 0 else -x for x in numbers]\n",
        "print(transformed)  # Output: [4, 2, 0, 4, 16]"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "**Performance Benchmark**: Comprehensions are faster due to Pythonâ€™s C-level optimizations."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import time\n",
        "\n",
        "start = time.time()\n",
        "loop_list = []\n",
        "for i in range(1000000):\n",
        "    loop_list.append(i * 3)\n",
        "loop_time = time.time() - start\n",
        "\n",
        "start = time.time()\n",
        "comp_list = [i * 3 for i in range(1000000)]\n",
        "comp_time = time.time() - start\n",
        "\n",
        "print(f\"Loop time: {loop_time:.4f} seconds\")\n",
        "print(f\"Comprehension time: {comp_time:.4f} seconds\")"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "**Best Practice**: Use comprehensions for simple transformations. For complex logic, use explicit loops for readability."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ### Challenge 4: Complex Comprehension\n",
        "Create a list of strings for numbers 1 to 20, labeling multiples of 3 as 'Fizz', multiples of 5 as 'Buzz', and multiples of both as 'FizzBuzz'. Non-multiples use the number (e.g., `['1', '2', 'Fizz', '4', 'Buzz', ..., 'FizzBuzz']`)."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Your code here\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## 5. Advanced List Techniques\n",
        "\n",
        "### 5.1 Nested Lists\n",
        "Nested lists are used for multidimensional data, such as matrices or hierarchical structures."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n",
        "print(matrix[1][2])  # Output: 6\n",
        "\n",
        "matrix[1] = [10, 11, 12]  # Replace row\n",
        "print(matrix)  # Output: [[1, 2, 3], [10, 11, 12], [7, 8, 9]]"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "**Pitfall**: Using `[[]] * n` creates shared references for nested lists."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Incorrect\n",
        "bad_matrix = [[]] * 4\n",
        "bad_matrix[0].append(1)\n",
        "print(bad_matrix)  # Output: [[1], [1], [1], [1]]\n",
        "\n",
        "# Correct\n",
        "good_matrix = [[] for _ in range(4)]\n",
        "good_matrix[0].append(1)\n",
        "print(good_matrix)  # Output: [[1], [], [], []]"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ### 5.2 Copying Lists\n",
        "Use `copy()` for shallow copies or `copy.deepcopy()` for nested lists to avoid modifying the original."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import copy\n",
        "original = [1, [2, 3], 4]\n",
        "shallow = original.copy()\n",
        "deep = copy.deepcopy(original)\n",
        "shallow[1][0] = 99\n",
        "print(original)  # Output: [1, [99, 3], 4]\n",
        "print(deep)      # Output: [1, [2, 3], 4]"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "**Pitfall**: Assignment creates a reference, not a copy."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "original = [1, 2, 3]\n",
        "reference = original\n",
        "reference[0] = 100\n",
        "print(original)  # Output: [100, 2, 3]"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ### 5.3 Performance and Time Complexity\n",
        "Key operations and their complexities:\n",
        "- **O(1)**: `append()`, `pop()` (end), indexing, `len()`.\n",
        "- **O(n)**: `insert()`, `pop(index)`, `remove()`, `in`, slicing.\n",
        "- **O(n log n)**: `sort()`.\n",
        "\n",
        "For frequent searches, use sets (O(1) lookup). For numerical data, consider NumPy."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import time\n",
        "\n",
        "large_list = list(range(1000000))\n",
        "large_set = set(large_list)\n",
        "\n",
        "start = time.time()\n",
        "999999 in large_list\n",
        "list_time = time.time() - start\n",
        "\n",
        "start = time.time()\n",
        "999999 in large_set\n",
        "set_time = time.time() - start\n",
        "\n",
        "print(f\"List search time: {list_time:.4f} seconds\")\n",
        "print(f\"Set search time: {set_time:.4f} seconds\")"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ### 5.4 Memory Management\n",
        "Lists are dynamic arrays, resizing automatically by doubling capacity when full. This ensures O(1) amortized time for `append()` but increases memory usage."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import sys\n",
        "lst = []\n",
        "print(sys.getsizeof(lst))  # Output: ~56 (empty list)\n",
        "lst.extend([1, 2, 3, 4])\n",
        "print(sys.getsizeof(lst))  # Output: ~88 (room for growth)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ### Challenge 5: Matrix Trace\n",
        "Create a 5x5 matrix with random integers (1-50). Compute the sum of both diagonals (main and secondary)."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import random\n",
        "matrix = [[random.randint(1, 50) for _ in range(5)] for _ in range(5)]\n",
        "def diagonal_sums(mat):\n",
        "    # Your code here\n",
        "    pass\n",
        "print(matrix)\n",
        "print(diagonal_sums(matrix))"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## 6. Practical Applications\n",
        "\n",
        ### 6.1 Data Processing\n",
        "Lists are used for filtering, mapping, and aggregating data."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Filter salaries above 50000 and compute average\n",
        "salaries = [45000, 60000, 52000, 75000, 48000, 80000]\n",
        "high_salaries = [s for s in salaries if s > 50000]\n",
        "avg_salary = sum(high_salaries) / len(high_salaries) if high_salaries else 0\n",
        "print(high_salaries)  # Output: [60000, 52000, 75000, 80000]\n",
        "print(f\"Average: {avg_salary:.2f}\")  # Output: Average: 66750.00"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### 6.2 Stacks and Queues\n",
        "Lists support stack (LIFO) and queue (FIFO) operations. Use `collections.deque` for efficient queues."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Stack\n",
        "stack = []\n",
        "stack.append(1)\n",
        "stack.append(2)\n",
        "print(stack.pop())  # Output: 2\n",
        "print(stack)        # Output: [1]\n",
        "\n",
        "# Queue\n",
        "from collections import deque\n",
        "queue = deque([1, 2, 3])\n",
        "queue.append(4)\n",
        "print(queue.popleft())  # Output: 1\n",
        "print(queue)            # Output: deque([2, 3, 4])"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ### 6.3 Algorithms with Lists\n",
        "Lists are used in algorithms like merging, partitioning, or detecting patterns."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Merge two sorted lists\n",
        "def merge_sorted_lists(lst1, lst2):\n",
        "    result = []\n",
        "    i, j = 0, 0\n",
        "    while i < len(lst1) and j < len(lst2):\n",
        "        if lst1[i] <= lst2[j]:\n",
        "            result.append(lst1[i])\n",
        "            i += 1\n",
        "        else:\n",
        "            result.append(lst2[j])\n",
        "            j += 1\n",
        "    result.extend(lst1[i:])\n",
        "    result.extend(lst2[j:])\n",
        "    return result\n",
        "\n",
        "print(merge_sorted_lists([1, 3, 5], [2, 4, 6]))  # Output: [1, 2, 3, 4, 5, 6]"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ### Challenge 6: Merge Sorted Lists\n",
        "Merge two sorted lists `a = [1, 4, 7]` and `b = [2, 3, 5, 8]` into a single sorted list without using `sorted()`."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "a = [1, 4, 7]\n",
        "b = [2, 3, 5, 8]\n",
        "def merge_lists(a, b):\n",
        "    # Your code here\n",
        "    pass\n",
        "print(merge_lists(a, b))"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ### Challenge 7: Palindrome Check\n",
        "Given a list of characters (e.g., `['r', 'a', 'c', 'e', 'c', 'a', 'r']`), check if itâ€™s a palindrome using list operations."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "chars = ['r', 'a', 'c', 'e', 'c', 'a', 'r']\n",
        "def is_palindrome(chars):\n",
        "    # Your code here\n",
        "    pass\n",
        "print(is_palindrome(chars))"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## 7. Common Pitfalls and Best Practices\n",
        "- **Modifying During Iteration**: Can skip elements or raise errors. Use comprehensions or iterate backwards.\n",
        "- **Complex Comprehensions**: Keep them simple for readability.\n",
        "- **Data Structure Choice**: Use sets for membership, dictionaries for mappings, NumPy for numerical data.\n",
        "- **Memory Efficiency**: Avoid unnecessary copies for large lists.\n",
        "- **PEP 8**: Use descriptive names (e.g., `numbers` instead of `lst`) and consistent formatting."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Pitfall: Modifying during iteration\n",
        "numbers = [1, 2, 3, 4, 5, 6]\n",
        "for num in numbers:\n",
        "    if num % 2 == 0:\n",
        "        numbers.remove(num)  # Skips elements\n",
        "print(numbers)  # Output: [1, 3, 5] (4, 6 skipped)\n",
        "\n",
        "# Correct: Use comprehension\n",
        "numbers = [1, 2, 3, 4, 5, 6]\n",
        "numbers = [num for num in numbers if num % 2 != 0]\n",
        "print(numbers)  # Output: [1, 3, 5]"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ### Challenge 8: Safe Removal\n",
        "Given `values = [10, 15, 20, 25, 30, 35, 40]`, remove all multiples of 5 safely and return the new list."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "values = [10, 15, 20, 25, 30, 35, 40]\n",
        "# Your code here\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## 8. Integration with Libraries\n",
        "\n",
        "### 8.1 NumPy Arrays\n",
        "Lists can be converted to NumPy arrays for efficient numerical computations."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import numpy as np\n",
        "lst = [1, 2, 3, 4, 5]\n",
        "arr = np.array(lst)\n",
        "print(arr * 2)  # Output: [2 4 6 8 10]\n",
        "print(arr.mean())  # Output: 3.0"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### 8.2 Pandas DataFrames\n",
        "Lists can be used to create pandas DataFrames for data analysis."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import pandas as pd\n",
        "data = [['Alice', 85], ['Bob', 90], ['Charlie', 88]]\n",
        "df = pd.DataFrame(data, columns=['Name', 'Score'])\n",
        "print(df)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ### Challenge 9: NumPy Conversion\n",
        "Convert a list of 10 random floats (0-100) to a NumPy array, compute the square of each element, and find the maximum value."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import random\n",
        "import numpy as np\n",
        "floats = [random.uniform(0, 100) for _ in range(10)]\n",
        "# Your code here\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ### Challenge 10: Pandas Filtering\n",
        "Create a DataFrame from a list of lists `[['Alice', 85, 20], ['Bob', 90, 19], ['Charlie', 85, 21]]`. Filter rows where score > 85 and convert the result back to a list of lists."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import pandas as pd\n",
        "data = [['Alice', 85, 20], ['Bob', 90, 19], ['Charlie', 85, 21]]\n",
        "# Your code here\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## 9. Assignments\n",
        "These 10 assignments challenge you to apply list concepts to practical problems.\n",
        "\n",
        "1. **Statistical Analysis**: Generate a list of 30 random integers (1-100). Compute mean, median, mode, and variance.\n",
        "2. **Unique Characters**: Given a string (e.g., 'Programming in Python'), create a list of unique characters (case-sensitive) in order of appearance.\n",
        "3. **Matrix Transpose**: Create a 6x4 matrix with random integers (1-50). Write a function to transpose it (swap rows and columns).\n",
        "4. **Multi-Key Sort**: Create a list of tuples (name, score, age). Sort by score (descending), then age (ascending), then name (alphabetically).\n",
        "5. **List Union**: Write a function to compute the union of two lists, preserving order of first appearance, without using sets.\n",
        "6. **Sliding Window Sum**: Given a list of integers and window size `k`, return a list of sums for each window of size `k`.\n",
        "7. **Run-Length Encoding**: Implement run-length encoding for a list (e.g., `[1, 1, 2, 2, 2, 3]` â†’ `[(1, 2), (2, 3), (3, 1)]`).\n",
        "8. **List Rotation**: Write a function to rotate a list left by `n` positions (e.g., `[1, 2, 3, 4, 5]` with `n=2` â†’ `[3, 4, 5, 1, 2]`).\n",
        "9. **Subset Sum**: Given a list of integers and a target sum, find all subsets that sum to the target.\n",
        "10. **List Flattening**: Write a function to flatten a nested list (e.g., `[1, [2, 3], [4, [5, 6]]]` â†’ `[1, 2, 3, 4, 5, 6]`)."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import random\n",
        "import statistics\n",
        "\n",
        "# Assignment 1: Statistical Analysis\n",
        "numbers = [random.randint(1, 100) for _ in range(30)]\n",
        "def list_stats(lst):\n",
        "    return {\n",
        "        'mean': statistics.mean(lst),\n",
        "        'median': statistics.median(lst),\n",
        "        'mode': statistics.mode(lst),\n",
        "        'variance': statistics.variance(lst) if len(lst) > 1 else 0\n",
        "    }\n",
        "print(numbers, list_stats(numbers))\n",
        "\n",
        "# Assignment 2: Unique Characters\n",
        "text = \"Programming in Python\"\n",
        "def unique_chars(s):\n",
        "    # Your code here\n",
        "    pass\n",
        "\n",
        "# Assignment 3: Matrix Transpose\n",
        "matrix = [[random.randint(1, 50) for _ in range(4)] for _ in range(6)]\n",
        "def transpose_matrix(mat):\n",
        "    # Your code here\n",
        "    pass\n",
        "\n",
        "# Assignment 4: Multi-Key Sort\n",
        "students = [(\"Alice\", 85, 20), (\"Bob\", 90, 19), (\"Charlie\", 85, 21)]\n",
        "def sort_students(students):\n",
        "    # Your code here\n",
        "    pass\n",
        "\n",
        "# Assignment 5: List Union\n",
        "def list_union(lst1, lst2):\n",
        "    # Your code here\n",
        "    pass\n",
        "\n",
        "# Assignment 6: Sliding Window Sum\n",
        "def sliding_window_sum(nums, k):\n",
        "    # Your code here\n",
        "    pass\n",
        "\n",
        "# Assignment 7: Run-Length Encoding\n",
        "def run_length_encode(lst):\n",
        "    # Your code here\n",
        "    pass\n",
        "\n",
        "# Assignment 8: List Rotation\n",
        "def rotate_list(lst, n):\n",
        "    # Your code here\n",
        "    pass\n",
        "\n",
        "# Assignment 9: Subset Sum\n",
        "def subset_sum(nums, target):\n",
        "    # Your code here\n",
        "    pass\n",
        "\n",
        "# Assignment 10: List Flattening\n",
        "def flatten_list(nested):\n",
        "    # Your code here\n",
        "    pass"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## 10. Solutions to Challenges\n",
        "\n",
        "### Challenge 1: List Creation and Access"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "books = [\"1984\", \"Dune\", \"Fahrenheit 451\", \"Brave New World\", \"The Hobbit\", \"LotR\", \"Harry Potter\", \"Ender's Game\"]\n",
        "print(books[0], books[3], books[-2], len(books) >= 5)  # Output: 1984 Brave New World Harry Potter True"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### Challenge 2: Complex Slicing"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "data = [0, 10, 20, 30, 40, 50, 60, 70, 80, 90]\n",
        "data[-3:] = [100, 200]\n",
        "print(data[::-2])  # Output: [200, 60, 40, 20, 0]"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ### Challenge 3: Advanced List Methods"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "items = [10, 20, 10, 30, 20, 40]\n",
        "items.append(50)\n",
        "items.insert(2, 15)\n",
        "while 10 in items:\n",
        "    items.remove(10)\n",
        "items.sort()\n",
        "print(items.index(20))  # Output: 1\n",
        "print(items)            # Output: [15, 20, 20, 30, 40, 50]"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ### Challenge 4: Complex Comprehension"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "fizzbuzz = ['FizzBuzz' if x % 3 == 0 and x % 5 == 0 else 'Fizz' if x % 3 == 0 else 'Buzz' if x % 5 == 0 else str(x) for x in range(1, 21)]\n",
        "print(fizzbuzz)  # Output: ['1', '2', 'Fizz', '4', 'Buzz', 'Fizz', '7', '8', 'Fizz', 'Buzz', '11', 'Fizz', '13', '14', 'FizzBuzz', '16', '17', 'Fizz', '19', 'Buzz']"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ### Challenge 5: Matrix Trace"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "matrix = [[random.randint(1, 50) for _ in range(5)] for _ in range(5)]\n",
        "def diagonal_sums(mat):\n",
        "    n = len(mat)\n",
        "    main = sum(mat[i][i] for i in range(n))\n",
        "    secondary = sum(mat[i][n-1-i] for i in range(n))\n",
        "    return main, secondary\n",
        "print(matrix)\n",
        "print(diagonal_sums(matrix))  # Output: (main_sum, secondary_sum)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ### Challenge 6: Merge Sorted Lists"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "a = [1, 4, 7]\n",
        "b = [2, 3, 5, 8]\n",
        "def merge_lists(a, b):\n",
        "    result = []\n",
        "    i, j = 0, 0\n",
        "    while i < len(a) and j < len(b):\n",
        "        if a[i] <= b[j]:\n",
        "            result.append(a[i])\n",
        "            i += 1\n",
        "        else:\n",
        "            result.append(b[j])\n",
        "            j += 1\n",
        "    result.extend(a[i:])\n",
        "    result.extend(b[j:])\n",
        "    return result\n",
        "print(merge_lists(a, b))  # Output: [1, 2, 3, 4, 5, 7, 8]"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ### Challenge 7: Palindrome Check"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "chars = ['r', 'a', 'c', 'e', 'c', 'a', 'r']\n",
        "def is_palindrome(chars):\n",
        "    return chars == chars[::-1]\n",
        "print(is_palindrome(chars))  # Output: True"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ### Challenge 8: Safe Removal"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "values = [10, 15, 20, 25, 30, 35, 40]\n",
        "values = [x for x in values if x % 5 != 0]\n",
        "print(values)  # Output: []"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ### Challenge 9: NumPy Conversion"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import random\n",
        "import numpy as np\n",
        "floats = [random.uniform(0, 100) for _ in range(10)]\n",
        "arr = np.array(floats)\n",
        "squared = arr ** 2\n",
        "max_value = np.max(squared)\n",
        "print(floats, squared, max_value)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ### Challenge 10: Pandas Filtering"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import pandas as pd\n",
        "data = [['Alice', 85, 20], ['Bob', 90, 19], ['Charlie', 85, 21]]\n",
        "df = pd.DataFrame(data, columns=['Name', 'Score', 'Age'])\n",
        "filtered = df[df['Score'] > 85]\n",
        "result = filtered.values.tolist()\n",
        "print(result)  # Output: [['Bob', 90, 19]]"
      ],
      "execution_count": null,
      "outputs": []
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.8.10"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 4
}